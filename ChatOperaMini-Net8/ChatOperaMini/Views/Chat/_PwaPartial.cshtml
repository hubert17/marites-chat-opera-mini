<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
<link rel="manifest" href="/manifest.json">
<meta name="theme-color" content="#2196f3">

<script>
    
    if ('serviceWorker' in navigator && 'PushManager' in window) {
        navigator.serviceWorker.register('/service-worker.js')
            .then(function (registration) {
                console.log('Service Worker registered with scope:', registration.scope);
                return navigator.serviceWorker.ready;
            })
            .then(function (registration) {
                console.log('Service Worker is ready:', registration);

                return registration.pushManager.subscribe({
                    userVisibleOnly: true, // Ensures notifications are always visible to the user
                    applicationServerKey: urlBase64ToUint8Array('@ViewBag.VapidPublicKey') // Pass the VAPID public key
                });
            })
            .then(function (subscription) {
                console.log('User is subscribed:', subscription);

                // Send subscription details to the server
                fetch('/chat/subscribe/', {
                    method: 'POST',
                    body: JSON.stringify(subscription), // Convert subscription object to JSON
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            })
            .catch(function (err) {
                console.log('Failed to subscribe the user: ', err);
            });
    }

    // Utility function to convert the VAPID public key from Base64 to Uint8Array
    function urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }

</script>
