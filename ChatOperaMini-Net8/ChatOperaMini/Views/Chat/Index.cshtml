@model MessageViewModel
@{
    Layout = null;
    string messageUrl = $"/?sender={@Model.Sender}&channelCode={@Model.ChannelCode}";
    bool hasUnreadMessages = Model.UnreadMessages.Any();
    var operaMiniQs = ViewBag.OperaMini != "0" ? Html.Raw("&operaMini=1") : Html.Raw("");
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marites Chat [@Model.ChannelCode]</title>

    @if (ViewBag.OperaMini == "0")
    {
        <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests" />
        <link rel="manifest" href="/manifest.json">
        <meta name="theme-color" content="#2196f3">
        <link rel="icon" type="image/png" href="/images/icons/favicon.ico" />

        <!-- iOS PWA Compatibility -->
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
        <meta name="apple-mobile-web-app-title" content="MaritesChat">
        <!-- Apple Touch Icons -->
        <link rel="apple-touch-icon" href="/images/icons/apple-touch-icon.png">
        <link rel="apple-touch-startup-image" href="/images/icons/icon-512x512.png">

        <script>
            const vapidPublicKey = '@ViewBag.VapidPublicKey';
            const senderSelf = '@Model.Sender';
            const channelCode = '@Model.ChannelCode'
        </script>
        <script src="/push-manager.js?v=7"></script>
    }  

    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background-color: #000;
        }

        #chat-container {
            padding: 5px;
            background-color: #ffffff;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

        .input-field, .button, .label {
            width: 100%;
            padding: 8px;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .input-field {
            border: 1px solid #ccc;
            margin: 3px 0 2px;
        }

        .button {
            border: none;
            cursor: pointer;
            color: white;
            text-align: center;
            display: block;
            text-decoration: none;

            padding: 10px;
            border-radius: 4px;
            text-align: center;
            cursor: pointer;
        }

        .primary-button {
            background-color: #2196f3;
        }

            .primary-button:focus {
                outline: 3px solid #1a78c2;
                background-color: #1c80cf;
                font-size: 1.1em;
                font-weight: bold;
            }

        .secondary-button {
            background-color: #9c27b0;
            padding: 6px;
        }

            .secondary-button:focus {
                outline: 3px solid #751d84;
                background-color: #852196;
            }

        .error-button {
            background-color: white;
            color: #e51c23;
            border: 2px solid #e51c23;
        }

            .error-button:hover, .error-button:focus {
                background-color: #e51c23;
                color: white;
                outline: none;
            }

        .label {
            background-color: dimgrey;
            color: white;
            border-radius: 0px;
        }

            .label span {
                display: block;
            }

        .message {
            padding: 5px 0;
            border-bottom: 1px solid #ccc;
        }

            .message:last-of-type {
                border-bottom: none;
            }

        .message-list {
            border: 1px solid #ccc;
            padding: 3px;
        }

        a {
            color: black;
            text-decoration: none;
        }
    </style>

    <style>
        /* Container for the top section */
        #top-container {
            width: 100%;
            background-color: #03a9f4; /* Background color for the top section */
            padding: 10px;
        }

        #top-content {
            display: flex;
            justify-content: flex-end; /* Align everything to the right */
            align-items: center;
            gap: 10px; /* Space between elements */
            padding-right: 20px;
        }

        /* Prompt message styling */
        #prompt-message {
            color: white;
            margin: 0;
            text-align: right; /* Align text to the right */
        }

        /* Container for buttons */
        #action-buttons-container {
            display: flex;
            gap: 10px;
        }



        /* Main chat container */
        #chat-container {

        }

    </style>

</head>

<body>
    @if (ViewBag.OperaMini == "0")
    {
        <!-- Push Notification Permission Request -->
        <div id="top-container">
            <div id="top-content">
                <p id="prompt-message" style="display: none;">
                    Stay updated with the latest, Marites!
                </p>
                <div id="action-buttons-container">
                    <button id="enable-notifications-button" class="button secondary-button" style="display: none;">
                        Enable Notification
                    </button>
                    <button id="install-pwa-button" class="button primary-button" style="display: none;">
                        Install App
                    </button>
                </div>
            </div>
        </div>
    }

    <div id="chat-container">
        <form action="/chat/index?@operaMiniQs" method="post">
            @{
                int i = -1;
            }
            <div class="label button" id="unread-label" style="@(hasUnreadMessages ? "" : "display:none;")">
                <span><b>New Message</b></span>
                <span id="latest-date">
                    @if (hasUnreadMessages)
                    {
                        @Model.UnreadMessages.LastOrDefault()?.SendDate.ToString("M-d-yy h:mmtt")
                    }
                </span>
            </div>
            <div id="unread-messages" style="@(hasUnreadMessages ? "" : "display:none;")">
                @foreach (var message in Model.UnreadMessages)
                {
                    i++;
                    <div class="message">
                        <a href="#u@(message.Id)">
                            [@(i + 1)] @message.Sender: @message.MessageText
                        </a>
                    </div>
                    <input type="hidden" name="unreadMessageIds[@i]" value="@message.Id" />
                }
            </div>

            <input type="hidden" name="Sender" value="@Model.Sender" />
            <input type="hidden" name="ChannelCode" value="@Model.ChannelCode" />
            <label id="write-label">@(hasUnreadMessages ? "Write a reply" : "Write message"):</label>
            <textarea rows="2" id="message-input" name="MessageText" class="input-field"></textarea>
            <button id="send-button" type="submit" class="button primary-button" style="margin-bottom:10px;">Send</button>
        </form>

        <div class="label button" id="inbox-label">
            <span>
                @if (ViewBag.OperaMini == "0")
                {
                    <b>INBOX</b>
                }
                else
                {
                    <a href="@(messageUrl)&page=1@(operaMiniQs)" style="color:white;"><b>REFRESH INBOX</b></a>
                }
            </span>
            
            @if (Model.Messages.Any() && Model.PageNo == 1)
            {
                <span id="recent-date" style="@(!hasUnreadMessages ? "" : "display:none;")">@Model.Messages.FirstOrDefault().SendDate.ToManilaTime().ToString("M-d-yy h:mmtt")</span>
            }
            @if (Model.PageNo > 1)
            {
                <span>[@Model.PageNo of @Model.PageTotal]</span>
            }
        </div>

        <div class="message-list">
            @foreach (var message in Model.Messages)
            {
                <div class="message">
                    <a href="#m@(message.Id)" id="m@(message.Id)">
                        @(message.Sender.Equals(Model.Sender, StringComparison.OrdinalIgnoreCase) ? "Me" : message.Sender): @message.MessageText
                    </a>
                </div>
            }
        </div>

        @if (Model.PageTotal > 0 && Model.PageNo != Model.PageTotal)
        {
            <a href="@(messageUrl)&page=@(Model.PageNo + 1)@operaMiniQs" class="button secondary-button">Older</a>
        }
        <a href="@(messageUrl)&page=1@(operaMiniQs)" class="button secondary-button" style="margin-top: 5px;">Recent</a>

        <a href="/" id="leave-button" class="button error-button" style="margin-top:15px;">Leave Channel [@Model.ChannelCode]</a>
    </div>

    @if (ViewBag.MessageId != null && ViewBag.MessageId != 0)
    {
        <script>
            document.addEventListener("DOMContentLoaded", function () {
                window.location.hash = '#m@(ViewBag.MessageId)';
            });
        </script>
    }

    @if (ViewBag.OperaMini == "0")
    {
        <partial name="_SignalrPartial" />
    }

</body>
</html>
